<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.canvus.app.dao.mapper.FeedsMapper">

<insert id="createFeedTableRow" parameterType="feed">
	INSERT INTO FEEDS(
	    FEED_ID
	    ,USER_ID1
	    ,USER_ID2
	    ,USER_ID3
	    ,USER_ID4
	    ,CONTEXT
	) VALUES (
	    #{feed_id}
	    ,#{user_id1}
	    ,#{user_id2, jdbcType=VARCHAR}
	    ,#{user_id3, jdbcType=VARCHAR}
	    ,#{user_id4, jdbcType=VARCHAR}
	    ,#{context}
	)
</insert>

<select id="selectFeed" parameterType="string" resultType="feed">
	SELECT
		FEED_ID
	    ,USER_ID1
	    ,USER_ID2
	    ,USER_ID3
	    ,USER_ID4
	    ,CONTEXT
		,TO_CHAR(INPUTDATE, 'yyyy-MM-dd')	AS	INPUTDATE
	FROM
		FEEDS
	WHERE
		FEED_ID = #{string}
</select>

<update id="updateFeed" parameterType="feed">
	UPDATE FEEDS SET
		CONTEXT = #{context}
	WHERE
		FEED_ID = #{feed_id}
</update>

<!-- FeedDAO / getFeedTotalCount / 특정 유저의 피드 갯수 산출 -->
<select id="getFeedTotalCount" parameterType="string" resultType="int">
	SELECT
		COUNT(*)
	FROM
		FEEDS
	WHERE
		USER_ID1 = #{string}
</select>

<select id="getFeedTotalCountLogin" resultType="int">
	SELECT
		COUNT(DISTINCT FD.FEED_ID) AS COUNT
	FROM
		FEEDS FD,
		FOLLOWINGS FL
	WHERE
		FL.FOLLOWING_ID IN (FD.USER_ID1, FD.USER_ID2, FD.USER_ID3, FD.USER_ID4)
	  AND
		FL.USER_ID = #{user_id}
	  AND
		(SYSDATE - FD.INPUTDATE) &lt;= 31
</select>

<select id="selectFeedBundle" parameterType="string" resultType="feedComponent">
	SELECT
		F.FEED_ID	AS feed_id
		 ,U.NICKNAME	AS nickname1
	FROM
		FEEDS F, USERS U
	WHERE
		(F.USER_ID1 = #{string}
		OR
		 F.USER_ID2 = #{string}
		OR
		 F.USER_ID3 = #{string}
		OR
		 F.USER_ID4 = #{string})
	  	AND
		U.USER_ID = F.USER_ID1
	ORDER BY
		INPUTDATE DESC
</select>

<select id="getFeedsBundleByIdList" parameterType="java.util.List" resultType="feedComponent">
	SELECT
		FEED_ID
		 ,USER_ID1
		 ,USER_ID2
		 ,USER_ID3
		 ,USER_ID4
		 ,CONTEXT
		 ,INPUTDATE
	FROM
		FEEDS
	WHERE
		FEED_ID IN (
			<foreach collection="list" item="one" separator=",">
				#{one.feed_id}
			</foreach>
		)
</select>

<select id="readFeedAbstract" parameterType="string" resultType="feed">
	SELECT
		FEED_ID
		,USER_ID1
		,USER_ID2
		,USER_ID3
		,USER_ID4
		,CONTEXT
		,TO_CHAR(INPUTDATE, 'yyyy-MM-dd') as inputdate
	FROM
		FEEDS
	WHERE
		FEED_ID = #{string}
</select>

	<!-- 성능 고려해서 오라클 함수를 만들어서 구성 -->
	<select id="homePreview" resultType="feedComponent">
		SELECT
			S.feed_id AS feed_id
			,S.preview AS preview
			,S.inputdate AS inputdate
			,U.NICKNAME AS nickname1
		FROM
		(
			SELECT
				FD.FEED_ID  AS  feed_id
				,FD.PAGE_FILE   AS  preview
				,F.INPUTDATE AS  inputdate
				,F.USER_ID1 AS user_id
			FROM
				FEED_DRAWINGS FD, FEEDS F
			WHERE
				FUNC_SPLIT(FD.PAGE_FILE, '--divide--', 1) = '1.png'
			AND
				F.FEED_ID = FD.FEED_ID
			ORDER BY
				inputdate DESC <!-- 상위 5개를 뽑아내려면 서브쿼리로 전체셀렉을 할 수 밖에 없다 -->
		) S
		,USERS U
		WHERE
		    U.USER_ID = S.user_id
		    AND
			ROWNUM &lt;= 4 <!-- &lt; 는 <를 의미한다 -->
	</select>

	<select id="homePreviewLogin" resultType="hashmap">
		SELECT
			FD.FEED_ID AS FEED_ID
		    ,CONCAT(FD.FEED_ID, '--divide--1.png') AS PREVIEW
			,U.NICKNAME AS NICKNAME
		FROM
			FEEDS FD,
			FOLLOWINGS FL,
		  	USERS U
		WHERE
			FL.FOLLOWING_ID IN (FD.USER_ID1, FD.USER_ID2, FD.USER_ID3, FD.USER_ID4)
			AND
			FL.USER_ID = #{user_id}
		  	AND
		    U.USER_ID = FD.USER_ID1
		  	AND
			(SYSDATE - FD.INPUTDATE) &lt;= 31
		ORDER BY
			FD.INPUTDATE DESC
	</select>

	<delete id="deleteFeedFD" parameterType="feedComponent">
		DELETE
			FROM
				FEED_DRAWINGS
			WHERE
				FEED_ID = #{feed_id}
	</delete>
	<delete id="deleteFeedH" parameterType="feedComponent">
		DELETE
			FROM
				HISTORIES
			WHERE
				FEED_ID = #{feed_id}
	</delete>
	<delete id="deleteFeedBF" parameterType="feedComponent">
		DELETE
			FROM
				BOOKMARKED_FEEDS
			WHERE
				FEED_ID = #{feed_id}
	</delete>
	<delete id="deleteFeedTIF" parameterType="feedComponent">
		DELETE
			FROM
				TAGS_IN_FEED
			WHERE
				FEED_ID = #{feed_id}
	</delete>
	<delete id="deleteFeedFC" parameterType="feedComponent">
		DELETE
			FROM
				FEED_COMMENT
			WHERE
				FEED_ID = #{feed_id}
	</delete>
	<delete id="deleteFeedL" parameterType="feedComponent">
		DELETE
			FROM
				LIKE_TABLE
			WHERE
				FEED_ID = #{feed_id}
	</delete>
	<delete id="deleteFeedF" parameterType="feedComponent">
		DELETE
			FROM
				FEEDS
			WHERE
				FEED_ID = #{feed_id}
	</delete>
</mapper>